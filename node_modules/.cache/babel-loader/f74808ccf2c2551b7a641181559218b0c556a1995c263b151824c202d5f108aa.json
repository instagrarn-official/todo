{"ast":null,"code":"import { parse } from \"./parse.js\";\nimport { compile, generate } from \"./compile.js\";\nexport { parse, compile, generate };\n/**\r\n * Parses and compiles a formula to a highly optimized function.\r\n * Combination of {@link parse} and {@link compile}.\r\n *\r\n * If the formula doesn't match any elements,\r\n * it returns [`boolbase`](https://github.com/fb55/boolbase)'s `falseFunc`.\r\n * Otherwise, a function accepting an _index_ is returned, which returns\r\n * whether or not the passed _index_ matches the formula.\r\n *\r\n * Note: The nth-rule starts counting at `1`, the returned function at `0`.\r\n *\r\n * @param formula The formula to compile.\r\n * @example\r\n * const check = nthCheck(\"2n+3\");\r\n *\r\n * check(0); // `false`\r\n * check(1); // `false`\r\n * check(2); // `true`\r\n * check(3); // `false`\r\n * check(4); // `true`\r\n * check(5); // `false`\r\n * check(6); // `true`\r\n */\nexport default function nthCheck(formula) {\n  return compile(parse(formula));\n}\n/**\r\n * Parses and compiles a formula to a generator that produces a sequence of indices.\r\n * Combination of {@link parse} and {@link generate}.\r\n *\r\n * @param formula The formula to compile.\r\n * @returns A function that produces a sequence of indices.\r\n * @example <caption>Always increasing</caption>\r\n *\r\n * ```js\r\n * const gen = nthCheck.sequence('2n+3')\r\n *\r\n * gen() // `1`\r\n * gen() // `3`\r\n * gen() // `5`\r\n * gen() // `8`\r\n * gen() // `11`\r\n * ```\r\n *\r\n * @example <caption>With end value</caption>\r\n *\r\n * ```js\r\n *\r\n * const gen = nthCheck.sequence('-2n+5');\r\n *\r\n * gen() // 0\r\n * gen() // 2\r\n * gen() // 4\r\n * gen() // null\r\n * ```\r\n */\nexport function sequence(formula) {\n  return generate(parse(formula));\n}","map":{"version":3,"mappings":"AAAA,SAASA,KAAK,QAAQ,YAAY;AAClC,SAASC,OAAO,EAAEC,QAAQ,QAAQ,cAAc;AAEhD,SAASF,KAAK,EAAEC,OAAO,EAAEC,QAAQ;AAEjC;;;;;;;;;;;;;;;;;;;;;;;AAuBA,eAAc,SAAUC,QAAQA,CAACC,OAAe;EAC5C,OAAOH,OAAO,CAACD,KAAK,CAACI,OAAO,CAAC,CAAC;AAClC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,OAAM,SAAUC,QAAQA,CAACD,OAAe;EACpC,OAAOF,QAAQ,CAACF,KAAK,CAACI,OAAO,CAAC,CAAC;AACnC","names":["parse","compile","generate","nthCheck","formula","sequence"],"sources":["https://raw.githubusercontent.com/fb55/nth-check/639fd2a4000b69f82350aad8c34cb43f77e483ba/src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}