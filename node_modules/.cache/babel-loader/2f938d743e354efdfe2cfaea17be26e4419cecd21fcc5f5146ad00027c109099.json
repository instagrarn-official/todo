{"ast":null,"code":"import { htmlDecodeTree, xmlDecodeTree, BinTrieFlags, determineBranch, replaceCodePoint } from \"entities/lib/decode.js\";\nvar CharCodes;\n(function (CharCodes) {\n  CharCodes[CharCodes[\"Tab\"] = 9] = \"Tab\";\n  CharCodes[CharCodes[\"NewLine\"] = 10] = \"NewLine\";\n  CharCodes[CharCodes[\"FormFeed\"] = 12] = \"FormFeed\";\n  CharCodes[CharCodes[\"CarriageReturn\"] = 13] = \"CarriageReturn\";\n  CharCodes[CharCodes[\"Space\"] = 32] = \"Space\";\n  CharCodes[CharCodes[\"ExclamationMark\"] = 33] = \"ExclamationMark\";\n  CharCodes[CharCodes[\"Number\"] = 35] = \"Number\";\n  CharCodes[CharCodes[\"Amp\"] = 38] = \"Amp\";\n  CharCodes[CharCodes[\"SingleQuote\"] = 39] = \"SingleQuote\";\n  CharCodes[CharCodes[\"DoubleQuote\"] = 34] = \"DoubleQuote\";\n  CharCodes[CharCodes[\"Dash\"] = 45] = \"Dash\";\n  CharCodes[CharCodes[\"Slash\"] = 47] = \"Slash\";\n  CharCodes[CharCodes[\"Zero\"] = 48] = \"Zero\";\n  CharCodes[CharCodes[\"Nine\"] = 57] = \"Nine\";\n  CharCodes[CharCodes[\"Semi\"] = 59] = \"Semi\";\n  CharCodes[CharCodes[\"Lt\"] = 60] = \"Lt\";\n  CharCodes[CharCodes[\"Eq\"] = 61] = \"Eq\";\n  CharCodes[CharCodes[\"Gt\"] = 62] = \"Gt\";\n  CharCodes[CharCodes[\"Questionmark\"] = 63] = \"Questionmark\";\n  CharCodes[CharCodes[\"UpperA\"] = 65] = \"UpperA\";\n  CharCodes[CharCodes[\"LowerA\"] = 97] = \"LowerA\";\n  CharCodes[CharCodes[\"UpperF\"] = 70] = \"UpperF\";\n  CharCodes[CharCodes[\"LowerF\"] = 102] = \"LowerF\";\n  CharCodes[CharCodes[\"UpperZ\"] = 90] = \"UpperZ\";\n  CharCodes[CharCodes[\"LowerZ\"] = 122] = \"LowerZ\";\n  CharCodes[CharCodes[\"LowerX\"] = 120] = \"LowerX\";\n  CharCodes[CharCodes[\"OpeningSquareBracket\"] = 91] = \"OpeningSquareBracket\";\n})(CharCodes || (CharCodes = {}));\n/** All the states the tokenizer can be in. */\nvar State;\n(function (State) {\n  State[State[\"Text\"] = 1] = \"Text\";\n  State[State[\"BeforeTagName\"] = 2] = \"BeforeTagName\";\n  State[State[\"InTagName\"] = 3] = \"InTagName\";\n  State[State[\"InSelfClosingTag\"] = 4] = \"InSelfClosingTag\";\n  State[State[\"BeforeClosingTagName\"] = 5] = \"BeforeClosingTagName\";\n  State[State[\"InClosingTagName\"] = 6] = \"InClosingTagName\";\n  State[State[\"AfterClosingTagName\"] = 7] = \"AfterClosingTagName\";\n  // Attributes\n  State[State[\"BeforeAttributeName\"] = 8] = \"BeforeAttributeName\";\n  State[State[\"InAttributeName\"] = 9] = \"InAttributeName\";\n  State[State[\"AfterAttributeName\"] = 10] = \"AfterAttributeName\";\n  State[State[\"BeforeAttributeValue\"] = 11] = \"BeforeAttributeValue\";\n  State[State[\"InAttributeValueDq\"] = 12] = \"InAttributeValueDq\";\n  State[State[\"InAttributeValueSq\"] = 13] = \"InAttributeValueSq\";\n  State[State[\"InAttributeValueNq\"] = 14] = \"InAttributeValueNq\";\n  // Declarations\n  State[State[\"BeforeDeclaration\"] = 15] = \"BeforeDeclaration\";\n  State[State[\"InDeclaration\"] = 16] = \"InDeclaration\";\n  // Processing instructions\n  State[State[\"InProcessingInstruction\"] = 17] = \"InProcessingInstruction\";\n  // Comments & CDATA\n  State[State[\"BeforeComment\"] = 18] = \"BeforeComment\";\n  State[State[\"CDATASequence\"] = 19] = \"CDATASequence\";\n  State[State[\"InSpecialComment\"] = 20] = \"InSpecialComment\";\n  State[State[\"InCommentLike\"] = 21] = \"InCommentLike\";\n  // Special tags\n  State[State[\"BeforeSpecialS\"] = 22] = \"BeforeSpecialS\";\n  State[State[\"SpecialStartSequence\"] = 23] = \"SpecialStartSequence\";\n  State[State[\"InSpecialTag\"] = 24] = \"InSpecialTag\";\n  State[State[\"BeforeEntity\"] = 25] = \"BeforeEntity\";\n  State[State[\"BeforeNumericEntity\"] = 26] = \"BeforeNumericEntity\";\n  State[State[\"InNamedEntity\"] = 27] = \"InNamedEntity\";\n  State[State[\"InNumericEntity\"] = 28] = \"InNumericEntity\";\n  State[State[\"InHexEntity\"] = 29] = \"InHexEntity\";\n})(State || (State = {}));\nfunction isWhitespace(c) {\n  return c === CharCodes.Space || c === CharCodes.NewLine || c === CharCodes.Tab || c === CharCodes.FormFeed || c === CharCodes.CarriageReturn;\n}\nfunction isEndOfTagSection(c) {\n  return c === CharCodes.Slash || c === CharCodes.Gt || isWhitespace(c);\n}\nfunction isNumber(c) {\n  return c >= CharCodes.Zero && c <= CharCodes.Nine;\n}\nfunction isASCIIAlpha(c) {\n  return c >= CharCodes.LowerA && c <= CharCodes.LowerZ || c >= CharCodes.UpperA && c <= CharCodes.UpperZ;\n}\nfunction isHexDigit(c) {\n  return c >= CharCodes.UpperA && c <= CharCodes.UpperF || c >= CharCodes.LowerA && c <= CharCodes.LowerF;\n}\nexport var QuoteType;\n(function (QuoteType) {\n  QuoteType[QuoteType[\"NoValue\"] = 0] = \"NoValue\";\n  QuoteType[QuoteType[\"Unquoted\"] = 1] = \"Unquoted\";\n  QuoteType[QuoteType[\"Single\"] = 2] = \"Single\";\n  QuoteType[QuoteType[\"Double\"] = 3] = \"Double\";\n})(QuoteType || (QuoteType = {}));\n/**\n * Sequences used to match longer strings.\n *\n * We don't have `Script`, `Style`, or `Title` here. Instead, we re-use the *End\n * sequences with an increased offset.\n */\nconst Sequences = {\n  Cdata: new Uint8Array([0x43, 0x44, 0x41, 0x54, 0x41, 0x5b]),\n  CdataEnd: new Uint8Array([0x5d, 0x5d, 0x3e]),\n  CommentEnd: new Uint8Array([0x2d, 0x2d, 0x3e]),\n  ScriptEnd: new Uint8Array([0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74]),\n  StyleEnd: new Uint8Array([0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65]),\n  TitleEnd: new Uint8Array([0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65]) // `</title`\n};\n\nexport default class Tokenizer {\n  constructor(_ref, cbs) {\n    let {\n      xmlMode = false,\n      decodeEntities = true\n    } = _ref;\n    this.cbs = cbs;\n    /** The current state the tokenizer is in. */\n    this.state = State.Text;\n    /** The read buffer. */\n    this.buffer = \"\";\n    /** The beginning of the section that is currently being read. */\n    this.sectionStart = 0;\n    /** The index within the buffer that we are currently looking at. */\n    this.index = 0;\n    /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */\n    this.baseState = State.Text;\n    /** For special parsing behavior inside of script and style tags. */\n    this.isSpecial = false;\n    /** Indicates whether the tokenizer has been paused. */\n    this.running = true;\n    /** The offset of the current buffer. */\n    this.offset = 0;\n    this.currentSequence = undefined;\n    this.sequenceIndex = 0;\n    this.trieIndex = 0;\n    this.trieCurrent = 0;\n    /** For named entities, the index of the value. For numeric entities, the code point. */\n    this.entityResult = 0;\n    this.entityExcess = 0;\n    this.xmlMode = xmlMode;\n    this.decodeEntities = decodeEntities;\n    this.entityTrie = xmlMode ? xmlDecodeTree : htmlDecodeTree;\n  }\n  reset() {\n    this.state = State.Text;\n    this.buffer = \"\";\n    this.sectionStart = 0;\n    this.index = 0;\n    this.baseState = State.Text;\n    this.currentSequence = undefined;\n    this.running = true;\n    this.offset = 0;\n  }\n  write(chunk) {\n    this.offset += this.buffer.length;\n    this.buffer = chunk;\n    this.parse();\n  }\n  end() {\n    if (this.running) this.finish();\n  }\n  pause() {\n    this.running = false;\n  }\n  resume() {\n    this.running = true;\n    if (this.index < this.buffer.length + this.offset) {\n      this.parse();\n    }\n  }\n  /**\n   * The current index within all of the written data.\n   */\n  getIndex() {\n    return this.index;\n  }\n  /**\n   * The start of the current section.\n   */\n  getSectionStart() {\n    return this.sectionStart;\n  }\n  stateText(c) {\n    if (c === CharCodes.Lt || !this.decodeEntities && this.fastForwardTo(CharCodes.Lt)) {\n      if (this.index > this.sectionStart) {\n        this.cbs.ontext(this.sectionStart, this.index);\n      }\n      this.state = State.BeforeTagName;\n      this.sectionStart = this.index;\n    } else if (this.decodeEntities && c === CharCodes.Amp) {\n      this.state = State.BeforeEntity;\n    }\n  }\n  stateSpecialStartSequence(c) {\n    const isEnd = this.sequenceIndex === this.currentSequence.length;\n    const isMatch = isEnd ?\n    // If we are at the end of the sequence, make sure the tag name has ended\n    isEndOfTagSection(c) :\n    // Otherwise, do a case-insensitive comparison\n    (c | 0x20) === this.currentSequence[this.sequenceIndex];\n    if (!isMatch) {\n      this.isSpecial = false;\n    } else if (!isEnd) {\n      this.sequenceIndex++;\n      return;\n    }\n    this.sequenceIndex = 0;\n    this.state = State.InTagName;\n    this.stateInTagName(c);\n  }\n  /** Look for an end tag. For <title> tags, also decode entities. */\n  stateInSpecialTag(c) {\n    if (this.sequenceIndex === this.currentSequence.length) {\n      if (c === CharCodes.Gt || isWhitespace(c)) {\n        const endOfText = this.index - this.currentSequence.length;\n        if (this.sectionStart < endOfText) {\n          // Spoof the index so that reported locations match up.\n          const actualIndex = this.index;\n          this.index = endOfText;\n          this.cbs.ontext(this.sectionStart, endOfText);\n          this.index = actualIndex;\n        }\n        this.isSpecial = false;\n        this.sectionStart = endOfText + 2; // Skip over the `</`\n        this.stateInClosingTagName(c);\n        return; // We are done; skip the rest of the function.\n      }\n\n      this.sequenceIndex = 0;\n    }\n    if ((c | 0x20) === this.currentSequence[this.sequenceIndex]) {\n      this.sequenceIndex += 1;\n    } else if (this.sequenceIndex === 0) {\n      if (this.currentSequence === Sequences.TitleEnd) {\n        // We have to parse entities in <title> tags.\n        if (this.decodeEntities && c === CharCodes.Amp) {\n          this.state = State.BeforeEntity;\n        }\n      } else if (this.fastForwardTo(CharCodes.Lt)) {\n        // Outside of <title> tags, we can fast-forward.\n        this.sequenceIndex = 1;\n      }\n    } else {\n      // If we see a `<`, set the sequence index to 1; useful for eg. `<</script>`.\n      this.sequenceIndex = Number(c === CharCodes.Lt);\n    }\n  }\n  stateCDATASequence(c) {\n    if (c === Sequences.Cdata[this.sequenceIndex]) {\n      if (++this.sequenceIndex === Sequences.Cdata.length) {\n        this.state = State.InCommentLike;\n        this.currentSequence = Sequences.CdataEnd;\n        this.sequenceIndex = 0;\n        this.sectionStart = this.index + 1;\n      }\n    } else {\n      this.sequenceIndex = 0;\n      this.state = State.InDeclaration;\n      this.stateInDeclaration(c); // Reconsume the character\n    }\n  }\n  /**\n   * When we wait for one specific character, we can speed things up\n   * by skipping through the buffer until we find it.\n   *\n   * @returns Whether the character was found.\n   */\n  fastForwardTo(c) {\n    while (++this.index < this.buffer.length + this.offset) {\n      if (this.buffer.charCodeAt(this.index - this.offset) === c) {\n        return true;\n      }\n    }\n    /*\n     * We increment the index at the end of the `parse` loop,\n     * so set it to `buffer.length - 1` here.\n     *\n     * TODO: Refactor `parse` to increment index before calling states.\n     */\n    this.index = this.buffer.length + this.offset - 1;\n    return false;\n  }\n  /**\n   * Comments and CDATA end with `-->` and `]]>`.\n   *\n   * Their common qualities are:\n   * - Their end sequences have a distinct character they start with.\n   * - That character is then repeated, so we have to check multiple repeats.\n   * - All characters but the start character of the sequence can be skipped.\n   */\n  stateInCommentLike(c) {\n    if (c === this.currentSequence[this.sequenceIndex]) {\n      if (++this.sequenceIndex === this.currentSequence.length) {\n        if (this.currentSequence === Sequences.CdataEnd) {\n          this.cbs.oncdata(this.sectionStart, this.index, 2);\n        } else {\n          this.cbs.oncomment(this.sectionStart, this.index, 2);\n        }\n        this.sequenceIndex = 0;\n        this.sectionStart = this.index + 1;\n        this.state = State.Text;\n      }\n    } else if (this.sequenceIndex === 0) {\n      // Fast-forward to the first character of the sequence\n      if (this.fastForwardTo(this.currentSequence[0])) {\n        this.sequenceIndex = 1;\n      }\n    } else if (c !== this.currentSequence[this.sequenceIndex - 1]) {\n      // Allow long sequences, eg. --->, ]]]>\n      this.sequenceIndex = 0;\n    }\n  }\n  /**\n   * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.\n   *\n   * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).\n   * We allow anything that wouldn't end the tag.\n   */\n  isTagStartChar(c) {\n    return this.xmlMode ? !isEndOfTagSection(c) : isASCIIAlpha(c);\n  }\n  startSpecial(sequence, offset) {\n    this.isSpecial = true;\n    this.currentSequence = sequence;\n    this.sequenceIndex = offset;\n    this.state = State.SpecialStartSequence;\n  }\n  stateBeforeTagName(c) {\n    if (c === CharCodes.ExclamationMark) {\n      this.state = State.BeforeDeclaration;\n      this.sectionStart = this.index + 1;\n    } else if (c === CharCodes.Questionmark) {\n      this.state = State.InProcessingInstruction;\n      this.sectionStart = this.index + 1;\n    } else if (this.isTagStartChar(c)) {\n      const lower = c | 0x20;\n      this.sectionStart = this.index;\n      if (!this.xmlMode && lower === Sequences.TitleEnd[2]) {\n        this.startSpecial(Sequences.TitleEnd, 3);\n      } else {\n        this.state = !this.xmlMode && lower === Sequences.ScriptEnd[2] ? State.BeforeSpecialS : State.InTagName;\n      }\n    } else if (c === CharCodes.Slash) {\n      this.state = State.BeforeClosingTagName;\n    } else {\n      this.state = State.Text;\n      this.stateText(c);\n    }\n  }\n  stateInTagName(c) {\n    if (isEndOfTagSection(c)) {\n      this.cbs.onopentagname(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.state = State.BeforeAttributeName;\n      this.stateBeforeAttributeName(c);\n    }\n  }\n  stateBeforeClosingTagName(c) {\n    if (isWhitespace(c)) {\n      // Ignore\n    } else if (c === CharCodes.Gt) {\n      this.state = State.Text;\n    } else {\n      this.state = this.isTagStartChar(c) ? State.InClosingTagName : State.InSpecialComment;\n      this.sectionStart = this.index;\n    }\n  }\n  stateInClosingTagName(c) {\n    if (c === CharCodes.Gt || isWhitespace(c)) {\n      this.cbs.onclosetag(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.state = State.AfterClosingTagName;\n      this.stateAfterClosingTagName(c);\n    }\n  }\n  stateAfterClosingTagName(c) {\n    // Skip everything until \">\"\n    if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n      this.state = State.Text;\n      this.baseState = State.Text;\n      this.sectionStart = this.index + 1;\n    }\n  }\n  stateBeforeAttributeName(c) {\n    if (c === CharCodes.Gt) {\n      this.cbs.onopentagend(this.index);\n      if (this.isSpecial) {\n        this.state = State.InSpecialTag;\n        this.sequenceIndex = 0;\n      } else {\n        this.state = State.Text;\n      }\n      this.baseState = this.state;\n      this.sectionStart = this.index + 1;\n    } else if (c === CharCodes.Slash) {\n      this.state = State.InSelfClosingTag;\n    } else if (!isWhitespace(c)) {\n      this.state = State.InAttributeName;\n      this.sectionStart = this.index;\n    }\n  }\n  stateInSelfClosingTag(c) {\n    if (c === CharCodes.Gt) {\n      this.cbs.onselfclosingtag(this.index);\n      this.state = State.Text;\n      this.baseState = State.Text;\n      this.sectionStart = this.index + 1;\n      this.isSpecial = false; // Reset special state, in case of self-closing special tags\n    } else if (!isWhitespace(c)) {\n      this.state = State.BeforeAttributeName;\n      this.stateBeforeAttributeName(c);\n    }\n  }\n  stateInAttributeName(c) {\n    if (c === CharCodes.Eq || isEndOfTagSection(c)) {\n      this.cbs.onattribname(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.state = State.AfterAttributeName;\n      this.stateAfterAttributeName(c);\n    }\n  }\n  stateAfterAttributeName(c) {\n    if (c === CharCodes.Eq) {\n      this.state = State.BeforeAttributeValue;\n    } else if (c === CharCodes.Slash || c === CharCodes.Gt) {\n      this.cbs.onattribend(QuoteType.NoValue, this.index);\n      this.state = State.BeforeAttributeName;\n      this.stateBeforeAttributeName(c);\n    } else if (!isWhitespace(c)) {\n      this.cbs.onattribend(QuoteType.NoValue, this.index);\n      this.state = State.InAttributeName;\n      this.sectionStart = this.index;\n    }\n  }\n  stateBeforeAttributeValue(c) {\n    if (c === CharCodes.DoubleQuote) {\n      this.state = State.InAttributeValueDq;\n      this.sectionStart = this.index + 1;\n    } else if (c === CharCodes.SingleQuote) {\n      this.state = State.InAttributeValueSq;\n      this.sectionStart = this.index + 1;\n    } else if (!isWhitespace(c)) {\n      this.sectionStart = this.index;\n      this.state = State.InAttributeValueNq;\n      this.stateInAttributeValueNoQuotes(c); // Reconsume token\n    }\n  }\n\n  handleInAttributeValue(c, quote) {\n    if (c === quote || !this.decodeEntities && this.fastForwardTo(quote)) {\n      this.cbs.onattribdata(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.cbs.onattribend(quote === CharCodes.DoubleQuote ? QuoteType.Double : QuoteType.Single, this.index);\n      this.state = State.BeforeAttributeName;\n    } else if (this.decodeEntities && c === CharCodes.Amp) {\n      this.baseState = this.state;\n      this.state = State.BeforeEntity;\n    }\n  }\n  stateInAttributeValueDoubleQuotes(c) {\n    this.handleInAttributeValue(c, CharCodes.DoubleQuote);\n  }\n  stateInAttributeValueSingleQuotes(c) {\n    this.handleInAttributeValue(c, CharCodes.SingleQuote);\n  }\n  stateInAttributeValueNoQuotes(c) {\n    if (isWhitespace(c) || c === CharCodes.Gt) {\n      this.cbs.onattribdata(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.cbs.onattribend(QuoteType.Unquoted, this.index);\n      this.state = State.BeforeAttributeName;\n      this.stateBeforeAttributeName(c);\n    } else if (this.decodeEntities && c === CharCodes.Amp) {\n      this.baseState = this.state;\n      this.state = State.BeforeEntity;\n    }\n  }\n  stateBeforeDeclaration(c) {\n    if (c === CharCodes.OpeningSquareBracket) {\n      this.state = State.CDATASequence;\n      this.sequenceIndex = 0;\n    } else {\n      this.state = c === CharCodes.Dash ? State.BeforeComment : State.InDeclaration;\n    }\n  }\n  stateInDeclaration(c) {\n    if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n      this.cbs.ondeclaration(this.sectionStart, this.index);\n      this.state = State.Text;\n      this.sectionStart = this.index + 1;\n    }\n  }\n  stateInProcessingInstruction(c) {\n    if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n      this.cbs.onprocessinginstruction(this.sectionStart, this.index);\n      this.state = State.Text;\n      this.sectionStart = this.index + 1;\n    }\n  }\n  stateBeforeComment(c) {\n    if (c === CharCodes.Dash) {\n      this.state = State.InCommentLike;\n      this.currentSequence = Sequences.CommentEnd;\n      // Allow short comments (eg. <!-->)\n      this.sequenceIndex = 2;\n      this.sectionStart = this.index + 1;\n    } else {\n      this.state = State.InDeclaration;\n    }\n  }\n  stateInSpecialComment(c) {\n    if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n      this.cbs.oncomment(this.sectionStart, this.index, 0);\n      this.state = State.Text;\n      this.sectionStart = this.index + 1;\n    }\n  }\n  stateBeforeSpecialS(c) {\n    const lower = c | 0x20;\n    if (lower === Sequences.ScriptEnd[3]) {\n      this.startSpecial(Sequences.ScriptEnd, 4);\n    } else if (lower === Sequences.StyleEnd[3]) {\n      this.startSpecial(Sequences.StyleEnd, 4);\n    } else {\n      this.state = State.InTagName;\n      this.stateInTagName(c); // Consume the token again\n    }\n  }\n\n  stateBeforeEntity(c) {\n    // Start excess with 1 to include the '&'\n    this.entityExcess = 1;\n    this.entityResult = 0;\n    if (c === CharCodes.Number) {\n      this.state = State.BeforeNumericEntity;\n    } else if (c === CharCodes.Amp) {\n      // We have two `&` characters in a row. Stay in the current state.\n    } else {\n      this.trieIndex = 0;\n      this.trieCurrent = this.entityTrie[0];\n      this.state = State.InNamedEntity;\n      this.stateInNamedEntity(c);\n    }\n  }\n  stateInNamedEntity(c) {\n    this.entityExcess += 1;\n    this.trieIndex = determineBranch(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c);\n    if (this.trieIndex < 0) {\n      this.emitNamedEntity();\n      this.index--;\n      return;\n    }\n    this.trieCurrent = this.entityTrie[this.trieIndex];\n    const masked = this.trieCurrent & BinTrieFlags.VALUE_LENGTH;\n    // If the branch is a value, store it and continue\n    if (masked) {\n      // The mask is the number of bytes of the value, including the current byte.\n      const valueLength = (masked >> 14) - 1;\n      // If we have a legacy entity while parsing strictly, just skip the number of bytes\n      if (!this.allowLegacyEntity() && c !== CharCodes.Semi) {\n        this.trieIndex += valueLength;\n      } else {\n        // Add 1 as we have already incremented the excess\n        const entityStart = this.index - this.entityExcess + 1;\n        if (entityStart > this.sectionStart) {\n          this.emitPartial(this.sectionStart, entityStart);\n        }\n        // If this is a surrogate pair, consume the next two bytes\n        this.entityResult = this.trieIndex;\n        this.trieIndex += valueLength;\n        this.entityExcess = 0;\n        this.sectionStart = this.index + 1;\n        if (valueLength === 0) {\n          this.emitNamedEntity();\n        }\n      }\n    }\n  }\n  emitNamedEntity() {\n    this.state = this.baseState;\n    if (this.entityResult === 0) {\n      return;\n    }\n    const valueLength = (this.entityTrie[this.entityResult] & BinTrieFlags.VALUE_LENGTH) >> 14;\n    switch (valueLength) {\n      case 1:\n        {\n          this.emitCodePoint(this.entityTrie[this.entityResult] & ~BinTrieFlags.VALUE_LENGTH);\n          break;\n        }\n      case 2:\n        {\n          this.emitCodePoint(this.entityTrie[this.entityResult + 1]);\n          break;\n        }\n      case 3:\n        {\n          this.emitCodePoint(this.entityTrie[this.entityResult + 1]);\n          this.emitCodePoint(this.entityTrie[this.entityResult + 2]);\n        }\n    }\n  }\n  stateBeforeNumericEntity(c) {\n    if ((c | 0x20) === CharCodes.LowerX) {\n      this.entityExcess++;\n      this.state = State.InHexEntity;\n    } else {\n      this.state = State.InNumericEntity;\n      this.stateInNumericEntity(c);\n    }\n  }\n  emitNumericEntity(strict) {\n    const entityStart = this.index - this.entityExcess - 1;\n    const numberStart = entityStart + 2 + Number(this.state === State.InHexEntity);\n    if (numberStart !== this.index) {\n      // Emit leading data if any\n      if (entityStart > this.sectionStart) {\n        this.emitPartial(this.sectionStart, entityStart);\n      }\n      this.sectionStart = this.index + Number(strict);\n      this.emitCodePoint(replaceCodePoint(this.entityResult));\n    }\n    this.state = this.baseState;\n  }\n  stateInNumericEntity(c) {\n    if (c === CharCodes.Semi) {\n      this.emitNumericEntity(true);\n    } else if (isNumber(c)) {\n      this.entityResult = this.entityResult * 10 + (c - CharCodes.Zero);\n      this.entityExcess++;\n    } else {\n      if (this.allowLegacyEntity()) {\n        this.emitNumericEntity(false);\n      } else {\n        this.state = this.baseState;\n      }\n      this.index--;\n    }\n  }\n  stateInHexEntity(c) {\n    if (c === CharCodes.Semi) {\n      this.emitNumericEntity(true);\n    } else if (isNumber(c)) {\n      this.entityResult = this.entityResult * 16 + (c - CharCodes.Zero);\n      this.entityExcess++;\n    } else if (isHexDigit(c)) {\n      this.entityResult = this.entityResult * 16 + ((c | 0x20) - CharCodes.LowerA + 10);\n      this.entityExcess++;\n    } else {\n      if (this.allowLegacyEntity()) {\n        this.emitNumericEntity(false);\n      } else {\n        this.state = this.baseState;\n      }\n      this.index--;\n    }\n  }\n  allowLegacyEntity() {\n    return !this.xmlMode && (this.baseState === State.Text || this.baseState === State.InSpecialTag);\n  }\n  /**\n   * Remove data that has already been consumed from the buffer.\n   */\n  cleanup() {\n    // If we are inside of text or attributes, emit what we already have.\n    if (this.running && this.sectionStart !== this.index) {\n      if (this.state === State.Text || this.state === State.InSpecialTag && this.sequenceIndex === 0) {\n        this.cbs.ontext(this.sectionStart, this.index);\n        this.sectionStart = this.index;\n      } else if (this.state === State.InAttributeValueDq || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueNq) {\n        this.cbs.onattribdata(this.sectionStart, this.index);\n        this.sectionStart = this.index;\n      }\n    }\n  }\n  shouldContinue() {\n    return this.index < this.buffer.length + this.offset && this.running;\n  }\n  /**\n   * Iterates through the buffer, calling the function corresponding to the current state.\n   *\n   * States that are more likely to be hit are higher up, as a performance improvement.\n   */\n  parse() {\n    while (this.shouldContinue()) {\n      const c = this.buffer.charCodeAt(this.index - this.offset);\n      switch (this.state) {\n        case State.Text:\n          {\n            this.stateText(c);\n            break;\n          }\n        case State.SpecialStartSequence:\n          {\n            this.stateSpecialStartSequence(c);\n            break;\n          }\n        case State.InSpecialTag:\n          {\n            this.stateInSpecialTag(c);\n            break;\n          }\n        case State.CDATASequence:\n          {\n            this.stateCDATASequence(c);\n            break;\n          }\n        case State.InAttributeValueDq:\n          {\n            this.stateInAttributeValueDoubleQuotes(c);\n            break;\n          }\n        case State.InAttributeName:\n          {\n            this.stateInAttributeName(c);\n            break;\n          }\n        case State.InCommentLike:\n          {\n            this.stateInCommentLike(c);\n            break;\n          }\n        case State.InSpecialComment:\n          {\n            this.stateInSpecialComment(c);\n            break;\n          }\n        case State.BeforeAttributeName:\n          {\n            this.stateBeforeAttributeName(c);\n            break;\n          }\n        case State.InTagName:\n          {\n            this.stateInTagName(c);\n            break;\n          }\n        case State.InClosingTagName:\n          {\n            this.stateInClosingTagName(c);\n            break;\n          }\n        case State.BeforeTagName:\n          {\n            this.stateBeforeTagName(c);\n            break;\n          }\n        case State.AfterAttributeName:\n          {\n            this.stateAfterAttributeName(c);\n            break;\n          }\n        case State.InAttributeValueSq:\n          {\n            this.stateInAttributeValueSingleQuotes(c);\n            break;\n          }\n        case State.BeforeAttributeValue:\n          {\n            this.stateBeforeAttributeValue(c);\n            break;\n          }\n        case State.BeforeClosingTagName:\n          {\n            this.stateBeforeClosingTagName(c);\n            break;\n          }\n        case State.AfterClosingTagName:\n          {\n            this.stateAfterClosingTagName(c);\n            break;\n          }\n        case State.BeforeSpecialS:\n          {\n            this.stateBeforeSpecialS(c);\n            break;\n          }\n        case State.InAttributeValueNq:\n          {\n            this.stateInAttributeValueNoQuotes(c);\n            break;\n          }\n        case State.InSelfClosingTag:\n          {\n            this.stateInSelfClosingTag(c);\n            break;\n          }\n        case State.InDeclaration:\n          {\n            this.stateInDeclaration(c);\n            break;\n          }\n        case State.BeforeDeclaration:\n          {\n            this.stateBeforeDeclaration(c);\n            break;\n          }\n        case State.BeforeComment:\n          {\n            this.stateBeforeComment(c);\n            break;\n          }\n        case State.InProcessingInstruction:\n          {\n            this.stateInProcessingInstruction(c);\n            break;\n          }\n        case State.InNamedEntity:\n          {\n            this.stateInNamedEntity(c);\n            break;\n          }\n        case State.BeforeEntity:\n          {\n            this.stateBeforeEntity(c);\n            break;\n          }\n        case State.InHexEntity:\n          {\n            this.stateInHexEntity(c);\n            break;\n          }\n        case State.InNumericEntity:\n          {\n            this.stateInNumericEntity(c);\n            break;\n          }\n        default:\n          {\n            // `this._state === State.BeforeNumericEntity`\n            this.stateBeforeNumericEntity(c);\n          }\n      }\n      this.index++;\n    }\n    this.cleanup();\n  }\n  finish() {\n    if (this.state === State.InNamedEntity) {\n      this.emitNamedEntity();\n    }\n    // If there is remaining data, emit it in a reasonable way\n    if (this.sectionStart < this.index) {\n      this.handleTrailingData();\n    }\n    this.cbs.onend();\n  }\n  /** Handle any trailing data. */\n  handleTrailingData() {\n    const endIndex = this.buffer.length + this.offset;\n    if (this.state === State.InCommentLike) {\n      if (this.currentSequence === Sequences.CdataEnd) {\n        this.cbs.oncdata(this.sectionStart, endIndex, 0);\n      } else {\n        this.cbs.oncomment(this.sectionStart, endIndex, 0);\n      }\n    } else if (this.state === State.InNumericEntity && this.allowLegacyEntity()) {\n      this.emitNumericEntity(false);\n      // All trailing data will have been consumed\n    } else if (this.state === State.InHexEntity && this.allowLegacyEntity()) {\n      this.emitNumericEntity(false);\n      // All trailing data will have been consumed\n    } else if (this.state === State.InTagName || this.state === State.BeforeAttributeName || this.state === State.BeforeAttributeValue || this.state === State.AfterAttributeName || this.state === State.InAttributeName || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueDq || this.state === State.InAttributeValueNq || this.state === State.InClosingTagName) {\n      /*\n       * If we are currently in an opening or closing tag, us not calling the\n       * respective callback signals that the tag should be ignored.\n       */\n    } else {\n      this.cbs.ontext(this.sectionStart, endIndex);\n    }\n  }\n  emitPartial(start, endIndex) {\n    if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {\n      this.cbs.onattribdata(start, endIndex);\n    } else {\n      this.cbs.ontext(start, endIndex);\n    }\n  }\n  emitCodePoint(cp) {\n    if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {\n      this.cbs.onattribentity(cp);\n    } else {\n      this.cbs.ontextentity(cp);\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["htmlDecodeTree","xmlDecodeTree","BinTrieFlags","determineBranch","replaceCodePoint","CharCodes","State","isWhitespace","c","Space","NewLine","Tab","FormFeed","CarriageReturn","isEndOfTagSection","Slash","Gt","isNumber","Zero","Nine","isASCIIAlpha","LowerA","LowerZ","UpperA","UpperZ","isHexDigit","UpperF","LowerF","QuoteType","Sequences","Cdata","Uint8Array","CdataEnd","CommentEnd","ScriptEnd","StyleEnd","TitleEnd","Tokenizer","constructor","cbs","xmlMode","decodeEntities","Text","undefined","entityTrie","reset","state","buffer","sectionStart","index","baseState","currentSequence","running","offset","write","chunk","length","parse","end","finish","pause","resume","getIndex","getSectionStart","stateText","Lt","fastForwardTo","ontext","BeforeTagName","Amp","BeforeEntity","stateSpecialStartSequence","isEnd","sequenceIndex","isMatch","isSpecial","InTagName","stateInTagName","stateInSpecialTag","endOfText","actualIndex","stateInClosingTagName","Number","stateCDATASequence","InCommentLike","InDeclaration","stateInDeclaration","charCodeAt","stateInCommentLike","oncdata","oncomment","isTagStartChar","startSpecial","sequence","SpecialStartSequence","stateBeforeTagName","ExclamationMark","BeforeDeclaration","Questionmark","InProcessingInstruction","lower","BeforeSpecialS","BeforeClosingTagName","onopentagname","BeforeAttributeName","stateBeforeAttributeName","stateBeforeClosingTagName","InClosingTagName","InSpecialComment","onclosetag","AfterClosingTagName","stateAfterClosingTagName","onopentagend","InSpecialTag","InSelfClosingTag","InAttributeName","stateInSelfClosingTag","onselfclosingtag","stateInAttributeName","Eq","onattribname","AfterAttributeName","stateAfterAttributeName","BeforeAttributeValue","onattribend","NoValue","stateBeforeAttributeValue","DoubleQuote","InAttributeValueDq","SingleQuote","InAttributeValueSq","InAttributeValueNq","stateInAttributeValueNoQuotes","handleInAttributeValue","quote","onattribdata","Double","Single","stateInAttributeValueDoubleQuotes","stateInAttributeValueSingleQuotes","Unquoted","stateBeforeDeclaration","OpeningSquareBracket","CDATASequence","Dash","BeforeComment","ondeclaration","stateInProcessingInstruction","onprocessinginstruction","stateBeforeComment","stateInSpecialComment","stateBeforeSpecialS","stateBeforeEntity","entityExcess","entityResult","BeforeNumericEntity","trieIndex","trieCurrent","InNamedEntity","stateInNamedEntity","emitNamedEntity","masked","VALUE_LENGTH","valueLength","allowLegacyEntity","Semi","entityStart","emitPartial","emitCodePoint","stateBeforeNumericEntity","LowerX","InHexEntity","InNumericEntity","stateInNumericEntity","emitNumericEntity","strict","numberStart","stateInHexEntity","cleanup","shouldContinue","handleTrailingData","onend","endIndex","start","cp","onattribentity","ontextentity"],"sources":["https://raw.githubusercontent.com/fb55/htmlparser2/c123610e003a1eaebc61febed01cabb6e41eb658/src/Tokenizer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}